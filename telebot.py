"""–ë–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º"""

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import os
import requests
import traceback

_bot_instance = None


def get_bot():
    global _bot_instance
    if _bot_instance is None:
        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        _bot_instance = Application.builder().token(bot_token).build()

        _bot_instance.add_handler(CommandHandler("start", start))

    return _bot_instance


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start —Å –ª–æ–≥–∏–Ω–æ–º –∏–∑ —Å—Å—ã–ª–∫–∏"""
    user = update.effective_user
    args = context.args  # –≠—Ç–æ —Ç–æ, —á—Ç–æ –ø–æ—Å–ª–µ /start –≤ —Å—Å—ã–ª–∫–µ
    
    print(f"üîÑ /start –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.full_name} (@{user.username or 'no_username'})")
    print('user:\n', user, '\n\nid:\n', user.id)

    response = requests.post(
        "http://localhost:5000/api/bind-telegram",
        json={
            "user": {
                "id": user.id,
                "username": user.username,
                "full_name": user.full_name
            },
            "args": args,
        }
    )
    print(response)

def send_message(chat_id, text):
    method = "sendMessage"
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    url = f"https://api.telegram.org/bot{token}/{method}"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, data=data)
        result = response.json()
        
        if response.status_code == 200 and result.get("ok"):
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {result.get('description')}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/–∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    
def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å event loop"""
    import asyncio
    try:
        bot = get_bot()

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        print("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
        loop.run_until_complete(bot.run_polling(drop_pending_updates=True))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
