"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è Kanban
–ó–∞–ø—É—Å–∫: python admin.py
"""

from datetime import datetime
from flask import Flask

from models.base import db

from models.user import User
from models.board import Board
from models.column import Column
from models.task import Task
from models.activity_logs import Activity


def create_app():
    """–°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///D:/Work/GitHub/Kanban/instance/kanban.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    db.init_app(app)
    return app


app = create_app()


def show_help():
    print("""
    === üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Kanban ===
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
      help                    ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      exit                    ‚Äî –≤—ã–π—Ç–∏

      # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      list_users              ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      update_tg <login> <id>  ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å telegram_id
      delete_user <login>     ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏ –≤—Å—ë, —á—Ç–æ –µ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç)

      # –î–æ—Å–∫–∏
      list_boards             ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å–∫–∏
      delete_board <id>       ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–æ—Å–∫—É –ø–æ ID

      # –ó–∞–¥–∞—á–∏
      list_tasks              ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
      delete_task <id>        ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID

      # –õ–æ–≥–∏
      list_logs               ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
      clear_logs              ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞)
    """)


def list_users():
    with app.app_context():
        users = User.query.all()
        if not users:
            print("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        print("\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        print(f"{'ID':<3} {'Login':<20} {'Telegram ID':<15}")
        print("-" * 50)
        for u in users:
            tg = u.telegram_id or "‚Äî"
            print(f"{u.id:<3} {u.login:<20} {tg:<15}")


def update_telegram_id(login, tg_id):
    with app.app_context():
        user = User.query.filter_by(login=login).first()
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '{login}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        old_tg = user.telegram_id
        user.telegram_id = tg_id
        db.session.commit()
        print(f"‚úÖ telegram_id –æ–±–Ω–æ–≤–ª—ë–Ω: {old_tg} ‚Üí {tg_id}")


def delete_user(login):
    with app.app_context():
        user = User.query.filter_by(login=login).first()
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '{login}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        db.session.delete(user)
        db.session.commit()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{login}' –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")


def list_boards():
    with app.app_context():
        boards = Board.query.all()
        if not boards:
            print("üì≠ –ù–µ—Ç –¥–æ—Å–æ–∫")
            return
        print("\nüìå –î–æ—Å–∫–∏:")
        print(f"{'ID':<3} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<30} {'–í–ª–∞–¥–µ–ª–µ—Ü':<20}")
        print("-" * 60)
        for b in boards:
            owner = User.query.get(b.owner_id)
            owner_name = owner.login if owner else "??"
            print(f"{b.id:<3} {b.name:<30} {owner_name:<20}")


def delete_board(board_id):
    with app.app_context():
        try:
            board_id = int(board_id)
        except ValueError:
            print("‚ùå ID –¥–æ—Å–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        board = Board.query.get(board_id)
        if not board:
            print(f"‚ùå –î–æ—Å–∫–∞ —Å ID={board_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        db.session.delete(board)
        db.session.commit()
        print(f"‚úÖ –î–æ—Å–∫–∞ '{board.name}' —É–¥–∞–ª–µ–Ω–∞.")


def list_tasks():
    with app.app_context():
        tasks = Task.query.all()
        if not tasks:
            print("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á")
            return
        print("\nüìù –ó–∞–¥–∞—á–∏:")
        print(f"{'ID':<3} {'Title':<30} {'Owner':<15} {'Assignee':<15} {'Column':<3}")
        print("-" * 80)
        for t in tasks:
            owner = User.query.get(t.owner_id)
            assignee = User.query.get(t.assignee_id) if t.assignee_id else None
            print(f"{t.id:<3} {t.title[:30]:<30} "
                  f"{(owner.login if owner else '??'):<15} "
                  f"{(assignee.login if assignee else '‚Äî'):<15} "
                  f"{t.column_id:<3}")


def delete_task(task_id):
    with app.app_context():
        try:
            task_id = int(task_id)
        except ValueError:
            print("‚ùå ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        task = Task.query.get(task_id)
        if not task:
            print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID={task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        db.session.delete(task)
        db.session.commit()
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task.title}' —É–¥–∞–ª–µ–Ω–∞.")


def list_logs():
    with app.app_context():
        logs = Activity.query.order_by(Activity.timestamp.desc()).limit(20).all()
        if not logs:
            print("üì≠ –ù–µ—Ç –ª–æ–≥–æ–≤")
            return
        print("\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤:")
        print(f"{'ID':<3} {'User':<15} {'Action':<15} {'Target':<8} {'Time':<20}")
        print("-" * 80)
        for log in logs:
            user = User.query.get(log.user_id)
            username = user.login if user else "??"
            print(f"{log.id:<3} {username:<15} {log.action:<15} "
                  f"{log.target_type}:{log.target_id:<3} {log.timestamp.strftime('%Y-%m-%d %H:%M'):<20}")


def clear_logs():
    with app.app_context():
        cutoff = datetime.now().replace(year=datetime.now().year - 1)
        count = Activity.query.filter(Activity.timestamp < cutoff).delete()
        db.session.commit()
        print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞).")


if __name__ == "__main__":
    print("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Kanban!")
    show_help()

    while True:
        try:
            command = input("\n> ").strip()
            if not command:
                continue

            parts = command.split()
            cmd = parts[0].lower()

            if cmd == "exit":
                print("üëã –ü–æ–∫–∞!")
                break
            elif cmd == "help":
                show_help()
            elif cmd == "list_users":
                list_users()
            elif cmd == "update_tg" and len(parts) == 3:
                update_telegram_id(parts[1], parts[2])
            elif cmd == "delete_user" and len(parts) == 2:
                delete_user(parts[1])
            elif cmd == "list_boards":
                list_boards()
            elif cmd == "delete_board" and len(parts) == 2:
                delete_board(parts[1])
            elif cmd == "list_tasks":
                list_tasks()
            elif cmd == "delete_task" and len(parts) == 2:
                delete_task(parts[1])
            elif cmd == "list_logs":
                list_logs()
            elif cmd == "clear_logs":
                clear_logs()
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏ 'help'")
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–æ—â–∞–π!")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")